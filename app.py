import streamlit as st
import pandas as pd
from train import train_model
from predict import predict_price
from preprocessing import preprocess_ukr_dataset

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ", layout="wide")
st.title("üè† –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
df = pd.read_csv("dataset.csv")
df_clean = preprocess_ukr_dataset(df)
st.caption(f"üîé –†–æ–∑–º—ñ—Ä –æ—á–∏—â–µ–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É: {df_clean.shape[0]} —Ä—è–¥–∫—ñ–≤")

with st.expander("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—á–∏—â–µ–Ω—ñ –¥–∞–Ω—ñ"):
    st.dataframe(df_clean.head(10))

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫—É –Ω–∞–≤—á–∞–Ω–Ω—è
if st.button("üîß –ù–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å"):
    with st.spinner("–ú–æ–¥–µ–ª—å –Ω–∞–≤—á–∞—î—Ç—å—Å—è, –∑–∞—á–µ–∫–∞–π—Ç–µ..."):
        mae, mse, mae_fig, scatter_fig, pie_fig, X_train, X_test = train_model()

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Å–µ—Å—ñ—é
    st.session_state.mae = mae
    st.session_state.mse = mse
    st.session_state.mae_fig = mae_fig
    st.session_state.scatter_fig = scatter_fig
    st.session_state.pie_fig = pie_fig
    st.session_state.X_train = X_train
    st.session_state.X_test = X_test

# –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ —î –≤ —Å–µ—Å—ñ—ó
if "mae" in st.session_state:
    st.success(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–æ: MAE = {st.session_state.mae:,.0f}, MSE = {st.session_state.mse:,.0f}")

    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(st.session_state.mae_fig, use_container_width=True)
    with col2:
        st.plotly_chart(st.session_state.scatter_fig, use_container_width=True)

    st.plotly_chart(st.session_state.pie_fig, use_container_width=True)

    st.subheader("üìë –ß–∞—Å—Ç–∏–Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É")
    st.dataframe(st.session_state.X_train.head())

    st.subheader("üìë –ß–∞—Å—Ç–∏–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä—É")
    st.dataframe(st.session_state.X_test.head())

st.markdown("---")

# üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
st.header("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –Ω–æ–≤–æ–≥–æ –æ–±'—î–∫—Ç–∞")

with st.form("predict_form"):
    area_m2 = st.number_input("–ü–ª–æ—â–∞ (–≤ –º¬≤)", min_value=1.0, step=1.0)
    rooms = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç", min_value=0, step=1)
    floor = st.number_input("–ü–æ–≤–µ—Ä—Ö", min_value=0, step=1)
    city = st.text_input("–ú—ñ—Å—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ö–∏—ó–≤')")

    metro = st.selectbox("–ë–ª–∏–∑—å–∫–æ –¥–æ –º–µ—Ç—Ä–æ", ["–¢–∞–∫", "–ù—ñ"])
    renovated = st.selectbox("–ó —Ä–µ–º–æ–Ω—Ç–æ–º", ["–¢–∞–∫", "–ù—ñ"])
    auction = st.selectbox("–¢–æ—Ä–≥ –º–æ–∂–ª–∏–≤–∏–π", ["–¢–∞–∫", "–ù—ñ"])
    quiet = st.selectbox("–¢–∏—Ö–∞ –∑–æ–Ω–∞", ["–¢–∞–∫", "–ù—ñ"])
    furniture = st.selectbox("–ú–µ–±–ª—ñ", ["–¢–∞–∫", "–ù—ñ"])
    center = st.selectbox("–¶–µ–Ω—Ç—Ä –º—ñ—Å—Ç–∞", ["–¢–∞–∫", "–ù—ñ"])
    parking = st.selectbox("–ü–∞—Ä–∫—ñ–Ω–≥", ["–¢–∞–∫", "–ù—ñ"])

    submitted = st.form_submit_button("–°–ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏")

    if submitted and area_m2 and city:
        try:
            result = predict_price(
                area_m2=area_m2,
                rooms=rooms,
                floor=floor,
                city=city,
                metro=metro,
                renovated=renovated,
                auction=auction,
                quiet=quiet,
                furniture=furniture,
                center=center,
                parking=parking
            )
            st.success(f"üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {int(result):,} –≥—Ä–Ω")
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É: {e}")
